Write a class that allows getting and setting&nbsp;key-value pairs, however a&nbsp;time until expiration&nbsp;is associated with each key.

The class has three public methods:

set(key, value, duration):&nbsp;accepts an integer&nbsp;key, an&nbsp;integer&nbsp;value, and a duration in milliseconds. Once the&nbsp;duration&nbsp;has elapsed, the key should be inaccessible. The method should return&nbsp;true&nbsp;if the same&nbsp;un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.

get(key): if an un-expired key exists, it should return the associated value. Otherwise it should return&nbsp;-1.

count(): returns the count of un-expired keys.

&nbsp;
Example 1:


Input: 
actions = [&quot;TimeLimitedCache&quot;, &quot;set&quot;, &quot;get&quot;, &quot;count&quot;, &quot;get&quot;]
values = [[], [1, 42, 100], [1], [], [1]]
timeDelays = [0, 0, 50, 50, 150]
Output: [null, false, 42, 1, -1]
Explanation:
At t=0, the cache is constructed.
At t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn&#39;t exist so false is returned.
At t=50, key=1 is requested and the value of 42 is returned.
At t=50, count() is called and there is one active key in the cache.
At t=100, key=1 expires.
At t=150, get(1) is called but -1 is returned because the cache is empty.


Example 2:


Input: 
actions = [&quot;TimeLimitedCache&quot;, &quot;set&quot;, &quot;set&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;, &quot;count&quot;]
values = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]
timeDelays = [0, 0, 40, 50, 120, 200, 250]
Output: [null, false, true, 50, 50, -1, 0]
Explanation:
At t=0, the cache is constructed.
At t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn&#39;t exist so false is returned.
At t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.
At t=50, get(1) is called which returned 50.
At t=120, get(1) is called which returned 50.
At t=140, key=1 expires.
At t=200, get(1) is called but the cache is empty so -1 is returned.
At t=250, count() returns 0 because the cache is empty.


&nbsp;
Constraints:


	0 &lt;= key, value &lt;= 109
	0 &lt;= duration &lt;= 1000
	1 &lt;= actions.length &lt;= 100
	actions.length === values.length
	actions.length === timeDelays.length
	0 &lt;= timeDelays[i] &lt;= 1450
	actions[i]&nbsp;is one of &quot;TimeLimitedCache&quot;, &quot;set&quot;, &quot;get&quot; and&nbsp;&quot;count&quot;
	First action is always &quot;TimeLimitedCache&quot; and must be executed immediately, with a 0-millisecond delay

