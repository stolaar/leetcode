Given a function fn, return a&nbsp;memoized&nbsp;version of that function.

A&nbsp;memoized&nbsp;function is a function that will never be called twice with&nbsp;the same inputs. Instead it will return&nbsp;a cached value.

You can assume there are&nbsp;3&nbsp;possible input functions:&nbsp;sum, fib,&nbsp;and&nbsp;factorial.


	sum&nbsp;accepts two integers&nbsp;a and b and returns a + b.&nbsp;Assume that if a value has already been cached for the arguments (b, a) where a != b, it cannot be used for the arguments (a, b). For example, if the arguments are (3, 2) and (2, 3), two separate calls should be made.
	fib&nbsp;accepts a&nbsp;single integer&nbsp;n and&nbsp;returns&nbsp;1 if n &lt;= 1 or&nbsp;fib(n - 1) + fib(n - 2)&nbsp;otherwise.
	factorial&nbsp;accepts a single integer&nbsp;n and returns 1&nbsp;if&nbsp;n &lt;= 1&nbsp;or&nbsp;factorial(n - 1) * n&nbsp;otherwise.


&nbsp;
Example 1:


Input:
fnName = &quot;sum&quot;
actions = [&quot;call&quot;,&quot;call&quot;,&quot;getCallCount&quot;,&quot;call&quot;,&quot;getCallCount&quot;]
values = [[2,2],[2,2],[],[1,2],[]]
Output: [4,4,1,3,2]
Explanation:
const sum = (a, b) =&gt; a + b;
const memoizedSum = memoize(sum);
memoizedSum(2, 2); // &quot;call&quot; - returns 4. sum() was called as (2, 2) was not seen before.
memoizedSum(2, 2); // &quot;call&quot; - returns 4. However sum() was not called because the same inputs were seen before.
// &quot;getCallCount&quot; - total call count: 1
memoizedSum(1, 2); // &quot;call&quot; - returns 3. sum() was called as (1, 2) was not seen before.
// &quot;getCallCount&quot; - total call count: 2


Example 2:


Input:
fnName = &quot;factorial&quot;
actions = [&quot;call&quot;,&quot;call&quot;,&quot;call&quot;,&quot;getCallCount&quot;,&quot;call&quot;,&quot;getCallCount&quot;]
values = [[2],[3],[2],[],[3],[]]
Output: [2,6,2,2,6,2]
Explanation:
const factorial = (n) =&gt; (n &lt;= 1) ? 1 : (n * factorial(n - 1));
const memoFactorial = memoize(factorial);
memoFactorial(2); // &quot;call&quot; - returns 2.
memoFactorial(3); // &quot;call&quot; - returns 6.
memoFactorial(2); // &quot;call&quot; - returns 2. However factorial was not called because 2 was seen before.
// &quot;getCallCount&quot; - total call count: 2
memoFactorial(3); // &quot;call&quot; - returns 6. However factorial was not called because 3 was seen before.
// &quot;getCallCount&quot; - total call count: 2


Example 3:


Input:
fnName = &quot;fib&quot;
actions = [&quot;call&quot;,&quot;getCallCount&quot;]
values = [[5],[]]
Output: [8,1]
Explanation:
fib(5) = 8 // &quot;call&quot;
// &quot;getCallCount&quot; - total call count: 1


&nbsp;
Constraints:


	0 &lt;= a, b &lt;= 105
	1 &lt;= n &lt;= 10
	1 &lt;= actions.length &lt;= 105
	actions.length === values.length
	actions[i] is one of &quot;call&quot; and &quot;getCallCount&quot;
	fnName is one of &quot;sum&quot;, &quot;factorial&quot; and&nbsp;&quot;fib&quot;

