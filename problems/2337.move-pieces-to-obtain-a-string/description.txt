You are given two strings start and target, both of length n. Each string consists only of the characters &#39;L&#39;, &#39;R&#39;, and &#39;_&#39; where:


	The characters &#39;L&#39; and &#39;R&#39; represent pieces, where a piece &#39;L&#39; can move to the left only if there is a blank space directly to its left, and a piece &#39;R&#39; can move to the right only if there is a blank space directly to its right.
	The character &#39;_&#39; represents a blank space that can be occupied by any of the &#39;L&#39; or &#39;R&#39; pieces.


Return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.

&nbsp;
Example 1:


Input: start = &quot;_L__R__R_&quot;, target = &quot;L______RR&quot;
Output: true
Explanation: We can obtain the string target from start by doing the following moves:
- Move the first piece one step to the left, start becomes equal to &quot;L___R__R_&quot;.
- Move the last piece one step to the right, start becomes equal to &quot;L___R___R&quot;.
- Move the second piece three steps to the right, start becomes equal to &quot;L______RR&quot;.
Since it is possible to get the string target from start, we return true.


Example 2:


Input: start = &quot;R_L_&quot;, target = &quot;__LR&quot;
Output: false
Explanation: The &#39;R&#39; piece in the string start can move one step to the right to obtain &quot;_RL_&quot;.
After that, no pieces can move anymore, so it is impossible to obtain the string target from start.


Example 3:


Input: start = &quot;_R&quot;, target = &quot;R_&quot;
Output: false
Explanation: The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.

&nbsp;
Constraints:


	n == start.length == target.length
	1 &lt;= n &lt;= 105
	start and target consist of the characters &#39;L&#39;, &#39;R&#39;, and &#39;_&#39;.

